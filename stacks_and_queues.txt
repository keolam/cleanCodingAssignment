1. What is the main difference between a stack and a queue?

Stacks implement a Last-In-First-Out priority collection, while Queues implement a First-In-First-Out priority collection. 

2. What are the similarities between stacks and queues?

Stacks and queues can both be represented as arrays and employ array methods to alter the data. 

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

For both UNDO and REDO, I would use a Stack structure since you always need to access the last-used key-stroke for both options. 

Programming Questions

You may program the following question in any language of your choice. Before you begin coding, write out a plan as to how you will solve the question.

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

```js

const reverseString = string => {
  let stack = [];
  string.split('').forEach(letter => {
    stack.push(letter);
  });
  let reverse = '';
  while (stack.length > 0) {
    reverse = reverse.concat(stack.pop());
  }
  return reverse;
}

```

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

```js

let queue = [3,2,1];

function enqueue(element){ 
  queue.unshift(element); 
}

enqueue(4);
queue; // ==>[ 4, 3, 2, 1 ]

function dequeue(){
  temp = queue[0];
  queue.pop();
  return temp;
}

dequeue();
queue; //==> [ 4, 3, 2 ];
```


To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

1. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

```js
class Queue { 
  constructor() { 
    this.queue = []; 
  }
  enqueue(element) {
    return this.queue.push(element)
  }
  dequeue() {
    return this.queue.shift(); 
  }
}
var gallagers = new Queue();
gallagers.enqueue('Frank'); 
gallagers.enqueue('Fiona'); 
gallagers.enqueue('Lip'); 
gallagers.enqueue('Ian'); 
gallagers.enqueue('Carl'); 
gallagers.enqueue('Debbie'); 
gallagers.enqueue('Liam');

gallagers; // ==> Queue {queue: [ 'Frank', 'Fiona', 'Lip', 'Ian', 'Carl', 'Debbie', 'Liam' ] }
```

