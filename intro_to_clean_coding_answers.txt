  1. In your own words, explain what clean code is and why it is important.

  Clean code is the practice of writing maintainable and readable code. It is important so that when revisiting your code at a     later time, it will be easy to comprehend what your code is doing, and easier to amend and update that code. Clean code is also a good practice so your code can be understood by another programmer who may have to work on it.

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Today, many greenhouses are maintained by computers. Humidity and temperature can be measured remotely and computer code is used to add water and adjust temperature for ideal growing conditions. Faulty code in this circumstance could kill the plants or crops growing in the greenhouse.


3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.


```

FUNCTION do(x, y)               // Creating a new function

 IF y = "F" THEN               // Check if y is equal "F"

 SET z to (x−32) * (5/9)       // Formula to convert degrees Fahrenheit to celsius

 PRINT z                       // Print result

 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"

 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to Fahrenheit

 PRINT z                       // Print result

 END IF

END FUNCTION

```
The above function needs one adjustment to be considered clean code. The PRINT z command only needs to be written once, outside of the IF statements. Refactored:

```

FUNCTION do(x, y)               // Creating a new function

  IF y = "F" THEN               // Check if y is equal "F"

    SET z to (x−32) * (5/9)       // Formula to convert degrees Fahrenheit to celsius

  ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"

    SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to Fahrenheit

  END IF

  PRINT z                       // Print result

END FUNCTION

```

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

```
  FUNCTION calcPercent(sum, total)

   IF NOT(total = 0) THEN

     SET percentage to sum / total * 100

    ELSE

     PRINT "Sorry, cannot divide by 0"

    END IF

    PRINT percentage

  END FUNCTION
```

This code follows both single responsibility and DRY principals, however I would declare the percentage variable before the first IF statement:
```
  FUNCTION calcPercent(sum, total)

    INIT percentage

    IF NOT(total = 0) THEN

      SET percentage to sum / total * 100

    ELSE

      PRINT "Sorry, cannot divide by 0"

    END IF

    PRINT percentage

  END FUNCTION

```

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.


a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

```
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)

   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN

       CALL getPayment RETURNING amount

       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)

   ELSE IF paymentType = 'CREDIT CARD' THEN

       CALL getPayment RETURNING amount

       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)

   END IF
 
END FUNCTION
```
Here we apply	the DRY principle:

```
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)

     SET  total  to  subTotal * discountRate + (subTotal * tax)

     PRINT "Your total due is: " + total 


     IF paymentType = 'CASH' THEN
       
         SET total
       
          CALL getPayment RETURNING amount
   
       PRINT "Change due: " + amount - total
 
    ELSE IF paymentType = 'CREDIT CARD' THEN
   
    CALL getPayment RETURNING amount
   
    PRINT "Your credit card has been charged: " + total

   END IF

END FUNCTION
```
    b. The following function checks out a book if there are no issues with the guests account.

   ```
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

```
Add nested IF statement to above conditional:
```

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) && guest.outstandingFees = 0) THEN
        APPEND book to guest.books
        SET book.status to "Checked Out"
        PRINT "Your books have been issued."
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION
```

  c. The following class code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance

 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

END


CLASS AccountOffers

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

```
6. Square: Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

```js
const sumOrSquare = function(arr) {
    let sum = arr.reduce( (a,b) => {
        return a + b;
    });
    if (sum % Math.sqrt(sum) === 0) {
        return Math.sqrt(sum);
    }
    return sum;
}

// let arr = [10,1,4,6,1,1,2]; 
// sumOrSquare(arr); returns 5

```

7. Duplicate: Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

```js

const hasDuplicate = function(arr) {
    let tally = [];
    for(let i = 0; i <= arr.length; i++) {
        if(tally[arr[i]] === undefined) {
            tally[arr[i]] = 1;      
        } else {
            return true;
        }
    }
    return false;
}
//  let a = [6,1,4,12,7,4];
//   hasDuplicate(a); returns true
```

8.  Anagram: An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo

```js

const isAnagram = function(s1, s2) {
    s1 = s1.split('').sort().join();
    s2 = s2.split('').sort().join();
    return s1 === s2;
}

// isAnagram('rasp', 'spar'); returns true


```
